name: Build RPM Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-rpm:
    strategy:
      matrix:
        distro: [rhel9, rocky9]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for release notes

      - name: Set up RPM build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm rpm2cpio cpio alien

      - name: Create RPM build directories
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

      - name: Create source tarball
        run: |
          # Get current directory
          WORKSPACE_DIR=$(pwd)
          echo "Workspace directory: ${WORKSPACE_DIR}"
          
          # Read and clean version string
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "Creating tarball for version: '${VERSION}'"
          
          # Create temporary directory in workspace
          TEMP_DIR=$(mktemp -d)
          echo "Created temporary directory: ${TEMP_DIR}"
          
          # Create versioned directory
          VERSION_DIR="${TEMP_DIR}/chasm-${VERSION}"
          mkdir -p "${VERSION_DIR}"
          echo "Created version directory: ${VERSION_DIR}"
          
          # Copy all files except .git and temp directory
          echo "Copying files to version directory..."
          find "${WORKSPACE_DIR}" -maxdepth 1 -not -name '.' -not -name '..' -not -name '.git' -not -name "${TEMP_DIR##*/}" -exec cp -rv {} "${VERSION_DIR}/" \;
          
          # Verify files were copied
          echo "Verifying files in version directory..."
          ls -la "${VERSION_DIR}"
          
          # Create the tarball
          echo "Creating tarball..."
          cd "${TEMP_DIR}"
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          
          TARBALL_PATH="${HOME}/rpmbuild/SOURCES/chasm-${VERSION}.tar.gz"
          echo "Creating tarball at: ${TARBALL_PATH}"
          
          tar -czvf "${TARBALL_PATH}" "chasm-${VERSION}"
          TAR_EXIT_CODE=$?
          echo "Tar exit code: ${TAR_EXIT_CODE}"
          
          # Verify tarball was created
          echo "Verifying tarball..."
          ls -l "${TARBALL_PATH}"
          
          # Clean up
          cd "${WORKSPACE_DIR}"
          rm -rf "${TEMP_DIR}"

      - name: Update spec file version
        run: |
          # Read and clean version string
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "Updating spec file with version: '${VERSION}'"
          
          # Update version in spec file
          sed -i "s/^Version:.*/Version:        ${VERSION}/" chasm.spec
          
          # Copy spec file to SPECS directory
          cp chasm.spec ~/rpmbuild/SPECS/
          
          # Verify spec file
          echo "Verifying spec file contents:"
          cat ~/rpmbuild/SPECS/chasm.spec
          
          # Verify source tarball exists
          echo "Verifying source tarball exists:"
          ls -l "${HOME}/rpmbuild/SOURCES/chasm-${VERSION}.tar.gz"

      - name: Build RPM package
        run: |
          cd ~/rpmbuild/SPECS
          rpmbuild --define "_topdir $HOME/rpmbuild" -bb chasm.spec

      - name: Generate release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ github.ref }}^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag, get all commits
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" ${{ github.ref }})
          else
            # Get commits between tags
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" $PREV_TAG..${{ github.ref }})
          fi
          
          # Escape newlines for GitHub Actions
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: chasm-rpm-${{ matrix.distro }}
          path: ~/rpmbuild/RPMS/noarch/*.rpm

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ~/rpmbuild/RPMS/noarch/*.rpm
          body: ${{ steps.release_notes.outputs.notes }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-rpm:
    needs: build-rpm
    strategy:
      matrix:
        distro: [rhel9, rocky9]
    runs-on: ubuntu-latest
    steps:
      - name: Download RPM artifact
        uses: actions/download-artifact@v4
        with:
          name: chasm-rpm-${{ matrix.distro }}
          path: ./rpms
        continue-on-error: true

      - name: Debug artifact download
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of rpms directory:"
          ls -la ./rpms || true

      - name: Set up test environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible molecule molecule-podman podman

      - name: Run basic RPM tests
        run: |
          # Create a temporary directory for testing
          TEST_DIR=$(mktemp -d)
          
          # Copy RPM from artifacts directory
          if [ -d "./rpms" ]; then
            cp ./rpms/*.rpm "$TEST_DIR/"
          else
            echo "Error: RPM files not found in ./rpms directory"
            ls -la
            exit 1
          fi
          
          cd "$TEST_DIR"

          # Create test script
          cat > test_rpm.sh << 'EOF'
          #!/bin/bash
          set -e

          # Enable EPEL repository
          dnf install -y epel-release

          # Install Python 3.9 and pip
          dnf install -y python39 python39-pip python39-devel

          # Create Python 3.9 virtual environment
          python3.9 -m venv /opt/chasm-venv
          source /opt/chasm-venv/bin/activate

          # Install Ansible and dependencies
          pip3 install --upgrade pip
          pip3 install ansible-core>=2.9

          # Install the RPM
          dnf install -y *.rpm

          # Verify installation
          which chasm
          chasm --version

          # Run a basic playbook test
          cd /usr/share/chasm
          ansible-playbook site.yml --check
          EOF

          chmod +x test_rpm.sh

          # Run tests in container
          podman run --rm -v "$TEST_DIR:/test:Z" quay.io/rockylinux/rockylinux:9 /test/test_rpm.sh

          # Cleanup
          cd -
          rm -rf "$TEST_DIR" 