name: Shared RPM Build

on:
  workflow_call:
    inputs:
      version_type:
        description: "Type of version to use (dev, rc, release)"
        required: true
        type: string
      distro:
        description: "Distribution to build for (rhel9, rocky9)"
        required: true
        type: string
    outputs:
      rpm_path:
        description: "Path to the built RPM"
        value: ${{ jobs.build.outputs.rpm_path }}

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.distro == 'rocky9' && 'rockylinux:9' || 'redhat/ubi9' }}
    outputs:
      rpm_path: ${{ steps.build.outputs.rpm_path }}
    
    steps:
      - name: Install build dependencies
        run: |
          # Enable repositories based on distribution
          if [ "${{ inputs.distro }}" = "rhel9" ]; then
            # For RHEL UBI, install dnf-utils first
            dnf install -y dnf-utils
            
            # Try to enable CRB (CodeReady Builder) if available
            # UBI containers may not have these repos, so don't fail on error
            dnf config-manager --set-enabled codeready-builder-for-rhel-9-$(arch) 2>/dev/null || \
            dnf config-manager --set-enabled crb 2>/dev/null || \
            echo "CRB repository not available in UBI container, continuing without it"
            
            # Install EPEL RPM directly (this should work in UBI)
            dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm || \
            echo "EPEL installation failed, continuing without it"
            
            # Clean and update metadata
            dnf clean all
            dnf makecache
          else
            # For Rocky Linux - enable EPEL and CRB
            dnf install -y epel-release
            dnf config-manager --set-enabled crb
            dnf clean all
            dnf makecache
          fi
          
          # Install RPM build tools and Python
          dnf install -y rpm-build python3 python3-pip python3-devel gcc git

      - name: Create RPM build directories
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          # Use --ignore-installed to avoid conflicts with system RPM packages
          pip3 install --ignore-installed sphinx sphinx-rtd-theme
          
      - name: Update spec file version
        run: |
          # Read and clean version string
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "Updating spec file with version: '${VERSION}'"
          
          # Determine release number based on version type
          case "${{ inputs.version_type }}" in
            dev)
              RELEASE="0.dev$(date +%Y%m%d%H%M)%{?dist}"
              ;;
            rc)
              RC_NUM=$(echo "${{ github.ref }}" | grep -o 'rc[0-9]\+' | sed 's/rc//')
              RELEASE="0.rc${RC_NUM}%{?dist}"
              ;;
            release)
              RELEASE="1%{?dist}"
              ;;
          esac
          
          # Update version and release in rift.spec
          sed -i "s/^Version:.*/Version:        ${VERSION}/" rift.spec
          sed -i "s/^Release:.*/Release:        ${RELEASE}/" rift.spec
          
          # Copy spec file to rpmbuild
          cp rift.spec ~/rpmbuild/SPECS/
          
          # Debug: show the updated spec file
          echo "Updated rift.spec content:"
          cat ~/rpmbuild/SPECS/rift.spec

          # Create source archive
          # Create a temporary directory with the package name format expected by rpmbuild
          TEMP_DIR=$(mktemp -d)
          VERSION_DIR="${TEMP_DIR}/rift-${VERSION}"
          mkdir -p "$VERSION_DIR"
          
          # Copy all files except .git to the versioned directory
          rsync -av --exclude='.git' . "$VERSION_DIR/"
          
          # Create the source tarball in the SOURCES directory
          cd "$TEMP_DIR"
          tar -czvf "${HOME}/rpmbuild/SOURCES/rift-${VERSION}.tar.gz" "rift-${VERSION}"
          
          # Clean up temp directory
          rm -rf "$TEMP_DIR"
          
          cd "${GITHUB_WORKSPACE}"

      - name: Build RPM
        run: |
          # Build the RPM
          rpmbuild --define "_topdir $HOME/rpmbuild" -bb rift.spec

      - name: Find and copy RPM
        run: |
          # Find the built RPM
          RPM_FILE=$(find ~/rpmbuild/RPMS -name "*.rpm" -type f | head -1)
          if [ -z "$RPM_FILE" ]; then
            echo "No RPM file found!"
            exit 1
          fi
          
          # Create release directory and copy RPM with appropriate naming
          mkdir -p ~/release-rpms
          RPM_PATH=~/release-rpms/rift-${TAG_NAME}-${{ inputs.distro }}.rpm
          cp ~/rpmbuild/RPMS/noarch/*.rpm $RPM_PATH
          
          # Set output
          echo "rpm_path=$RPM_PATH" >> $GITHUB_OUTPUT 