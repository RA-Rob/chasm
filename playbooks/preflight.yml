---
# Preflight Playbook
#
# This playbook performs initial system setup and verification for Rift deployment.
# It handles the following tasks:
#
# 1. System Updates
#    - Updates all system packages
#    - Installs common utilities and tools
#    - Handles system reboots if needed
#
# 2. Controller Node Setup
#    - Installs Docker CE and related packages
#    - Configures Docker service
#    - Sets up Docker user permissions
#
# 3. User Configuration
#    - Creates installation user
#    - Configures SSH access
#    - Sets up sudo permissions
#
# Variables:
#   - install_user: Username for installation (default: ansible)
#   - install_uid: UID for installation user (default: 1000)
#   - install_gid: GID for installation user (default: 1000)
#   - common_packages: List of packages to install on all hosts
#   - controller_packages: Additional packages for controller nodes
#
# Usage:
#   ansible-playbook playbooks/preflight.yml -i inventory/hosts
#
# Dependencies:
#   - Ansible 2.9+
#   - Python 3.6+
#   - SSH access to target systems
#   - Passwordless sudo for initial user

# Preflight checks and setup
- name: Update system packages
  hosts: all
  become: true
  vars:
    update_timeout: 1800  # 30 minutes timeout
    excluded_packages:
      - kernel
      - kernel-core
      - kernel-modules
      - kernel-tools
      - kernel-tools-libs
  tasks:
    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required
      changed_when: false

    - name: Update all packages
      dnf:
        name: "*"
        state: latest
        update_cache: yes
        exclude: "{{ excluded_packages }}"
      register: update_result
      async: "{{ update_timeout }}"
      poll: 0

    - name: Wait for package update to complete
      async_status:
        jid: "{{ update_result.ansible_job_id }}"
      register: update_status
      until: update_status.finished
      retries: 30
      delay: 60
      changed_when: false

    - name: Check for update failures
      fail:
        msg: "Package update failed or timed out after {{ update_timeout }} seconds"
      when: update_status.failed or not update_status.finished

    - name: Install required packages
      dnf:
        name: "{{ common_packages }}"
        state: present
      register: package_install
      changed_when: package_install.changed

    - name: Check if reboot is needed
      shell: needs-restarting -r
      register: reboot_check
      changed_when: false
      failed_when: false
      ignore_errors: true

    - name: Reboot if required
      reboot:
        msg: "Reboot initiated by Ansible after system update"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
      when: reboot_check.rc == 1 or reboot_required.stat.exists

    - name: Wait for system to come back online
      wait_for_connection:
        delay: 10
        timeout: 300
      when: reboot_check.rc == 1 or reboot_required.stat.exists

- name: Setup Docker CE on controller
  hosts: controller
  become: true
  tasks:
    - name: Install required packages for Docker repository
      dnf:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present

    - name: Add Docker CE repository
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: '0644'

    - name: Install Docker CE packages
      dnf:
        name: "{{ controller_packages }}"
        state: present
        update_cache: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add installation user to docker group
      user:
        name: "{{ install_user }}"
        groups: docker
        append: yes

    - name: Ensure Docker daemon is running
      systemd:
        name: docker
        state: started
      register: docker_start

    - name: Wait for Docker daemon to be ready
      wait_for:
        path: /var/run/docker.sock
        state: present
        timeout: 30
      when: docker_start.changed

- name: Verify current user has sudo
  hosts: all
  gather_facts: false
  tasks:
    - name: Check sudo access
      command: sudo -n true
      register: sudo_check
      changed_when: false
      failed_when: false

    - name: Fail if no sudo access
      fail:
        msg: "Current user must have passwordless sudo access"
      when: sudo_check.rc != 0

- name: Create installation user
  hosts: all
  become: true
  tasks:
    - name: Create installation group
      group:
        name: "{{ install_group }}"
        gid: "{{ install_gid }}"
        state: present

    - name: Create installation user
      user:
        name: "{{ install_user }}"
        uid: "{{ install_uid }}"
        group: "{{ install_group }}"
        shell: /bin/bash
        create_home: yes
        state: present

    - name: Ensure sudoers.d directory exists
      file:
        path: /etc/sudoers.d
        state: directory
        mode: '0755'

    - name: Configure sudo access
      copy:
        content: "{{ install_user }} ALL=(ALL) NOPASSWD: ALL"
        dest: "/etc/sudoers.d/{{ install_user }}"
        mode: '0440'
        validate: /usr/sbin/visudo -cf %s

- name: Setup SSH access
  hosts: all
  become: true
  become_user: "{{ install_user }}"
  tasks:
    - name: Ensure .ssh directory exists
      file:
        path: "~/.ssh"
        state: directory
        mode: '0700'

    - name: Ensure authorized_keys file exists
      file:
        path: "~/.ssh/authorized_keys"
        state: touch
        mode: '0600'

    - name: Add public key
      lineinfile:
        path: "~/.ssh/authorized_keys"
        line: "{{ rift_ssh_public_key }}"
        state: present
      when: rift_ssh_public_key != ""

    - name: Set SSH directory permissions
      file:
        path: "~/.ssh"
        state: directory
        mode: '0700'
        recurse: yes

- name: Verify installation user setup
  hosts: all
  gather_facts: false
  tasks:
    - name: Test SSH connection
      command: ssh -o BatchMode=yes -o ConnectTimeout=5 {{ install_user }}@{{ inventory_hostname }} echo "SSH connection successful"
      register: ssh_test
      changed_when: false
      failed_when: false

    - name: Test sudo access
      command: ssh -o BatchMode=yes {{ install_user }}@{{ inventory_hostname }} sudo -n true
      register: sudo_test
      changed_when: false
      failed_when: false

    - name: Display verification results
      debug:
        msg: "Installation user verification completed"
      when: ssh_test.rc == 0 and sudo_test.rc == 0

    - name: Fail if verification failed
      fail:
        msg: "Installation user verification failed. Please check SSH and sudo access."
      when: ssh_test.rc != 0 or sudo_test.rc != 0